<apps version="2.0">
  <app keywords="starter,template,empty,blank,mtb-flow" req_capabilities_v2="[xmc7000]">
    <name>Empty App</name>
    <id>mtb-example-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 beta2 release</num>
        <commit>release-v4.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,starter,hello world,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>Hello World</name>
    <id>mtb-example-hal-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-hal-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 beta2 release</num>
        <commit>release-v4.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="wdt,mtb-flow" req_capabilities_v2="[xmc7000]">
    <name>Watchdog Timer</name>
    <id>mtb-example-psoc6-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-wdt</uri>
    <description><![CDATA[This example explains how to set up a Watchdog Timer (WDT) using the WDT HAL resource. The WDT resets the device if it is not serviced or "kicked" within the configured timeout interval. This helps in recovering the program from an unintended lock up.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,led,pwm,square wave,frequency,duty cycle,blinky,blinking" req_capabilities_v2="hal led [xmc7000]">
    <name>PWM Square Wave</name>
    <id>mtb-example-psoc6-pwm-square-wave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-pwm-square-wave</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 2 Hz.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pwm-square-wave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="uart,transmit,receive,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc6-uart-transmit-receive</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART (HAL) transmit and receive operation.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,master,slave,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>I2C Master</name>
    <id>mtb-example-psoc6-i2c-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-i2c-master</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,ezi2c,master,slave,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc6-i2c-master-ezi2c-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-i2c-master-ezi2c-slave</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master-ezi2c-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,slave,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc6-i2c-slave-callback</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C (HAL) resource in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="spi,master,slave,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>SPI Master</name>
    <id>mtb-example-psoc6-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of SPI (HAL) resource in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="oob,led,starter,hello world,mtb-flow" req_capabilities_v2="hal led uart switch [xmc7000] [kit_xmc72_evk]">
    <name>XMC7000 OOB Demo</name>
    <id>mtb-example-xmc7000-oob-demo</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-oob-demo</uri>
    <description><![CDATA[This example is the out-of-the-box (OOB) demo project for the KIT_XMC72_EVK XMC7200 evaluation kit which includes - Hello world, PWM square-wave output, GPIO interrupt, SAR ADC basics, XMC&#8482; MCU power modes, QSPI memory read/write, and CAN FD loopback code examples.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-oob-demo/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led uart switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,timer,mtb-flow" req_capabilities_v2="hal led [xmc7000]">
    <name>TCPWM Timer</name>
    <id>mtb-example-hal-tcpwm-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-tcpwm-timer</uri>
    <description><![CDATA[This code example generates an interrupt every second with the timer driver, and toggles the user LED when a timer interrupt is generated.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-tcpwm-timer/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,dead time,mtb-flow" req_capabilities_v2="hal [xmc7000]">
    <name>TCPWM Dead Time Mode</name>
    <id>mtb-example-hal-tcpwm-dt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-tcpwm-dt</uri>
    <description><![CDATA[This code example shows TCPWM dead-time mode function. PWM line and PWM COMPL pins output the 1-kHz frequency wave and 1-kHz frequency wave with PWM leftalign 250 us in PWM dead-time mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-tcpwm-dt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,smartio,smart io,mtb-flow" req_capabilities_v2="switch led smart_io [xmc7000]">
    <name>Smart IO with GPIO</name>
    <id>mtb-example-pdl-xmc7000-smartio-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-smartio-gpio</uri>
    <description><![CDATA[This example uses the smart I/O peripheral in XMC7000 MCU to connect the button input pin to an output pin to toggle an external LED. There is no CPU usage except for the initialization of GPIO and smart I/O.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-smartio-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>switch led smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,button,mtb-flow" req_capabilities_v2="switch led [xmc7000]">
    <name>GPIO Pins</name>
    <id>mtb-example-pdl-xmc7000-gpio-pins</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-gpio-pins</uri>
    <description><![CDATA[This example demonstrates the GPIO pin operation on the XMC7000 MCU, using Eclipse IDE for ModusToolbox&#8482;. This includes reading, writing, interrupts, and full port configurations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-gpio-pins/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>switch led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,asymmetric,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>Asymmetric PWM Generation</name>
    <id>mtb-example-pdl-xmc7000-pwm-dual-compare-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the TCPWM block of the XMC7000 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-pwm-dual-compare-capture/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="uart,transmit,receive,dma,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-example-pdl-xmc7000-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-uart-transmit-receive-dma</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation using DMA in XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="systick,timer,toggle,led,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>Toggle LED with SysTick Timer</name>
    <id>mtb-example-pdl-xmc7000-systick-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-systick-led</uri>
    <description><![CDATA[This code example demonstrates how to use the SysTick timer to generate a timer interrupt on XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-systick-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,sha2,message digest,hash,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>Cryptography SHA Demonstration</name>
    <id>mtb-example-pdl-xmc7000-crypto-sha</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-sha</uri>
    <description><![CDATA[This code example shows how to generate a 32-byte hash value or message digest for an arbitrary user input message with the SHA2 algorithm using the Cryptographic hardware block in the XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-sha/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,aes,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>Cryptography AES Demonstration</name>
    <id>mtb-example-pdl-xmc7000-crypto-aes</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-aes</uri>
    <description><![CDATA[This code example encrypts and decrypts user input data using the AES algorithm using a 128-bit key. The encrypted and decrypted data are displayed on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-aes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="canfd,can,mtb-flow" req_capabilities_v2="led [xmc7000] [kit_xmc72_evk]">
    <name>CAN FD</name>
    <id>mtb-example-pdl-xmc7000-canfd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-canfd</uri>
    <description><![CDATA[This code example demonstrates how to use controller area network flexible data-rate (CAN FD) in XMC7000 MCU devices. In this example, the CAN Node-1 sends a CAN FD or standard frame to CAN Node-2 on pressing the user button and vice versa. Both the CAN nodes log the received data over UART serial terminal. Each time a CAN frame is received, the user LED toggles.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-canfd/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="tcpwm,counter,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>TCPWM Counter</name>
    <id>mtb-example-pdl-xmc7000-tcpwm-counter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-tcpwm-counter</uri>
    <description><![CDATA[This code example demonstrates how to use the tcpwm counter on the XMC7000 MCU. The counter is started by pwm signal and work with 200KHz clock frequency. Enable the counter CC0 match interrupt, when counter up to CC0 match value generates the interrupt to toggle user LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-tcpwm-counter/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="gpio,led,freertos,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>FreeRTOS Blinky</name>
    <id>mtb-example-xmc7000-blinky-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates blinking LED functionality implemented by FreeRTOS tasks on the XMC7000 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-blinky-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="spi,master,slave,dma,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>SCB SPI Master DMA</name>
    <id>mtb-example-pdl-xmc7000-spi-master-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of the SPI Serial Communication Block (SCB) resource for XMC7000 MCU in master and slave mode using DMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-spi-master-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,power,sleep,mtb-flow" req_capabilities_v2="led low_power [xmc7000]">
    <name>Switching Power Modes</name>
    <id>mtb-example-xmc7000-switching-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-switching-power-modes</uri>
    <description><![CDATA[This example demonstrates how to transition XMC7000 MCU to the Active, Sleep, DeepSleep and Hibernate power states, and how to wake up and return to Active state.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-switching-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="low power,sleep,mtb-flow" req_capabilities_v2="uart low_power [xmc7000]">
    <name>Low-Power Wakeup from RTC Alarm</name>
    <id>mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm</uri>
    <description><![CDATA[This code example demonstrates XMC7000 MCU how to enter the DeepSleep and Hibernate mode, and wake-up using the RTC alarm.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="multicore,starter,template,empty,blank,mtb-flow" req_capabilities_v2="[xmc7000]">
    <name>Multicore Empty App</name>
    <id>mtb-example-xmc7000-multicore-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-multicore-empty-app</uri>
    <description><![CDATA[This empty application provides a multicore template for creating XMC7000 MCU applications.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-multicore-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="multicore,ipc,mtb-flow,pipes" req_capabilities_v2="multi_core [xmc7000]">
    <name>Multicore IPC Pipes</name>
    <id>mtb-example-xmc7000-multicore-ipc-pipes</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-multicore-ipc-pipes</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a message pipe in XMC7000 MCU. The pipe is used to send messages between CPUs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-multicore-ipc-pipes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mcwdt,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>MCWDT Interrupt</name>
    <id>mtb-example-pdl-xmc7000-mcwdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-mcwdt</uri>
    <description><![CDATA[This example shows how to configure XMC7000 MCWDT Subcounter0/1 and Subcounter2 operation with interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-mcwdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="lvd,interrupt,mtb-flow" req_capabilities_v2="led [xmc7000]">
    <name>LVD Interrupt</name>
    <id>mtb-example-pdl-xmc7000-lvd-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-lvd-interrupt</uri>
    <description><![CDATA[This code example shows how to configure low-voltage detection (LVD) in XMC7000 MCU to monitor VDDD and generate an interrupt when VDDD drops below the configured threshold.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-lvd-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="emulated,eeprom,flash,mtb-flow" req_capabilities_v2="led uart [xmc7000]">
    <name>Emulated EEPROM</name>
    <id>mtb-example-xmc7000-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-emulated-eeprom</uri>
    <description><![CDATA[This code example demonstrates emulation of EEPROM behavior in flash memory of XMC7000 MCU using emeeprom middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="fault handling,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>Fault Handling</name>
    <id>mtb-example-pdl-xmc7000-fault-handling</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-fault-handling</uri>
    <description><![CDATA[This example demonstrates the fault handling functionality of XMC7000 MCU using Peripheral Driver Library (PDL) System Library (SysLib).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-fault-handling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="qspi,spi,nor,flash,smif,serial-flash,mtb-flow" req_capabilities_v2="hal uart led qspi nor_flash [xmc7000]">
    <name>QSPI Flash Read Write</name>
    <id>mtb-example-hal-qspi-readwrite</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-qspi-readwrite</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad SPI (QSPI) mode using the serial memory interface (SMIF) block. This example uses the HAL QSPI driver to access the external NOR flash memory.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-qspi-readwrite/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,adc,hal" req_capabilities_v2="hal uart [xmc7000]">
    <name>ADC basic</name>
    <id>mtb-example-xmc7000-adc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-adc-basic</uri>
    <description><![CDATA[This example demonstrates use of the ADC (Analog to Digital Converter) HAL driver to perform voltage measurements in XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-adc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="evtgen,event generator,mtb-flow" req_capabilities_v2="uart [xmc7000]">
    <name>EVTGEN trigger ADC</name>
    <id>mtb-example-pdl-xmc7000-evtgen-active-trigger-adc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-evtgen-active-trigger-adc</uri>
    <description><![CDATA[This code example demonstrates how to use the XMC7000 MCU event generator (EVTGEN) resource to trigger ADC conversion in active power mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-evtgen-active-trigger-adc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,flash,code flash,hal" req_capabilities_v2="hal uart [xmc7000]">
    <name>Code Flash Sector Data Updating</name>
    <id>mtb-example-hal-code-flash-sector-data-updating</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-code-flash-sector-data-updating</uri>
    <description><![CDATA[This code example demonstrates the use of the Flash HAL driver to perform code flash Read/Write/Erase basic operate and update sector data online. The running steps logs on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-code-flash-sector-data-updating/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 beta2 release</num>
        <commit>release-v1.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,gpio,interrupt,switch" req_capabilities_v2="hal led switch low_power [xmc7000]">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc6-gpio-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-gpio-interrupt</uri>
    <description><![CDATA[This example demonstrates how to configure a GPIO to generate an interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led switch low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,rtc" req_capabilities_v2="hal rtc [xmc7000]">
    <name>RTC Basics</name>
    <id>mtb-example-psoc6-rtc-basics</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-rtc-basics</uri>
    <description><![CDATA[This example demonstrates the usage of the real-time clock (RTC).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-rtc-basics/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal rtc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,trng,mtb-flow" req_capabilities_v2="hal [xmc7000]">
    <name>Cryptography TRNG Demonstration</name>
    <id>mtb-example-psoc6-crypto-trng</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-crypto-trng</uri>
    <description><![CDATA[This code example demonstrates generating a One-Time Password (OTP) using the True Random Number generation feature of MCU cryptography block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-trng/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 beta2 release</num>
        <commit>release-v3.0.0-Beta2</commit>
      </version>
    </versions>
  </app>
</apps>
